{"ast":null,"code":"import { apiConfig } from '../authConfig';\nimport { getAccessToken } from './authService';\n\n/**\n * API service for handling data operations\n */\nexport const apiService = {\n  /**\n   * Get all tables the user has access to\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @returns {Promise<Array>} List of tables\n   */\n  async getTables(instance, account) {\n    const accessToken = await getAccessToken(instance, account);\n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.tables}`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error fetching tables: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  /**\n   * Get data from a specific table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {Object} params - Query parameters (page, page_size, filter_column, filter_value)\n   * @returns {Promise<Object>} Table data with pagination info\n   */\n  async getTableData(instance, account, tableName, params = {}) {\n    const accessToken = await getAccessToken(instance, account);\n\n    // Build query string from params\n    const queryParams = new URLSearchParams();\n    if (params.page) queryParams.append('page', params.page);\n    if (params.page_size) queryParams.append('page_size', params.page_size);\n    if (params.filter_column) queryParams.append('filter_column', params.filter_column);\n    if (params.filter_value) queryParams.append('filter_value', params.filter_value);\n    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';\n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}${queryString}`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 403) {\n        throw new Error('You do not have access to this table');\n      }\n      throw new Error(`Error fetching table data: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  /**\n   * Update a row in a table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {number} rowId - ID of the row to update\n   * @param {Object} updates - Object containing column-value pairs to update\n   * @returns {Promise<Object>} Response data\n   */\n  async updateRow(instance, account, tableName, rowId, updates) {\n    const accessToken = await getAccessToken(instance, account);\n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}/${rowId}`, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    if (!response.ok) {\n      throw new Error(`Error updating row: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  /**\n   * Insert a new row into a table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {Object} data - Object containing column-value pairs for the new row\n   * @returns {Promise<Object>} Response data\n   */\n  async insertRow(instance, account, tableName, data) {\n    const accessToken = await getAccessToken(instance, account);\n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`Error inserting row: ${response.statusText}`);\n    }\n    return response.json();\n  },\n  /**\n   * Delete a row from a table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {number} rowId - ID of the row to delete\n   * @returns {Promise<Object>} Response data\n   */\n  async deleteRow(instance, account, tableName, rowId) {\n    const accessToken = await getAccessToken(instance, account);\n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}/${rowId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error deleting row: ${response.statusText}`);\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["apiConfig","getAccessToken","apiService","getTables","instance","account","accessToken","response","fetch","baseUrl","endpoints","tables","headers","ok","Error","statusText","json","getTableData","tableName","params","queryParams","URLSearchParams","page","append","page_size","filter_column","filter_value","queryString","toString","data","status","updateRow","rowId","updates","method","body","JSON","stringify","insertRow","deleteRow"],"sources":["/Users/robertobutinar/codebase/data_entry_app/frontend/src/services/apiService.js"],"sourcesContent":["import { apiConfig } from '../authConfig';\nimport { getAccessToken } from './authService';\n\n/**\n * API service for handling data operations\n */\nexport const apiService = {\n  /**\n   * Get all tables the user has access to\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @returns {Promise<Array>} List of tables\n   */\n  async getTables(instance, account) {\n    const accessToken = await getAccessToken(instance, account);\n    \n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.tables}`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error fetching tables: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n  \n  /**\n   * Get data from a specific table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {Object} params - Query parameters (page, page_size, filter_column, filter_value)\n   * @returns {Promise<Object>} Table data with pagination info\n   */\n  async getTableData(instance, account, tableName, params = {}) {\n    const accessToken = await getAccessToken(instance, account);\n    \n    // Build query string from params\n    const queryParams = new URLSearchParams();\n    if (params.page) queryParams.append('page', params.page);\n    if (params.page_size) queryParams.append('page_size', params.page_size);\n    if (params.filter_column) queryParams.append('filter_column', params.filter_column);\n    if (params.filter_value) queryParams.append('filter_value', params.filter_value);\n    \n    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';\n    \n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}${queryString}`, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    \n    if (!response.ok) {\n      if (response.status === 403) {\n        throw new Error('You do not have access to this table');\n      }\n      throw new Error(`Error fetching table data: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n  \n  /**\n   * Update a row in a table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {number} rowId - ID of the row to update\n   * @param {Object} updates - Object containing column-value pairs to update\n   * @returns {Promise<Object>} Response data\n   */\n  async updateRow(instance, account, tableName, rowId, updates) {\n    const accessToken = await getAccessToken(instance, account);\n    \n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}/${rowId}`, {\n      method: 'PATCH',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error updating row: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n  \n  /**\n   * Insert a new row into a table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {Object} data - Object containing column-value pairs for the new row\n   * @returns {Promise<Object>} Response data\n   */\n  async insertRow(instance, account, tableName, data) {\n    const accessToken = await getAccessToken(instance, account);\n    \n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error inserting row: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n  \n  /**\n   * Delete a row from a table\n   * @param {Object} instance - MSAL instance\n   * @param {Object} account - User account\n   * @param {string} tableName - Name of the table\n   * @param {number} rowId - ID of the row to delete\n   * @returns {Promise<Object>} Response data\n   */\n  async deleteRow(instance, account, tableName, rowId) {\n    const accessToken = await getAccessToken(instance, account);\n    \n    const response = await fetch(`${apiConfig.baseUrl}${apiConfig.endpoints.data}/${tableName}/${rowId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error deleting row: ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}